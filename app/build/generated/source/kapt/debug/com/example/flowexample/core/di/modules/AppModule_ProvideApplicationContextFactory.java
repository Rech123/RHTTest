// Generated by Dagger (https://dagger.dev).
package com.example.flowexample.core.di.modules;

import android.content.Context;
import com.example.flowexample.core.App;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideApplicationContextFactory implements Factory<Context> {
  private final AppModule module;

  private final Provider<App> appProvider;

  public AppModule_ProvideApplicationContextFactory(AppModule module, Provider<App> appProvider) {
    this.module = module;
    this.appProvider = appProvider;
  }

  @Override
  public Context get() {
    return provideApplicationContext(module, appProvider.get());
  }

  public static AppModule_ProvideApplicationContextFactory create(AppModule module,
      Provider<App> appProvider) {
    return new AppModule_ProvideApplicationContextFactory(module, appProvider);
  }

  public static Context provideApplicationContext(AppModule instance, App app) {
    return Preconditions.checkNotNullFromProvides(instance.provideApplicationContext(app));
  }
}
