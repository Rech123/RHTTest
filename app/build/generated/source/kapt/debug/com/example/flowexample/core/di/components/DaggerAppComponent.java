// Generated by Dagger (https://dagger.dev).
package com.example.flowexample.core.di.components;

import android.content.Context;
import com.example.flowexample.breedsList.data.BreedsRepository;
import com.example.flowexample.breedsList.di.BreedListModule;
import com.example.flowexample.breedsList.di.BreedListModule_ProvideVeracityiewModelFactory;
import com.example.flowexample.breedsList.di.BreedListModule_ProvidesCurrencyRepostioryFactory;
import com.example.flowexample.breedsList.presentation.ui.activites.MainActivity;
import com.example.flowexample.breedsList.presentation.ui.fragments.BreedsFragment;
import com.example.flowexample.breedsList.presentation.ui.fragments.BreedsFragment_MembersInjector;
import com.example.flowexample.breedsList.presentation.viewmodels.BreedsVidewModel;
import com.example.flowexample.breedsList.presentation.viewmodels.BreedsVidewModel_Factory;
import com.example.flowexample.core.App;
import com.example.flowexample.core.App_MembersInjector;
import com.example.flowexample.core.api.RestWebService;
import com.example.flowexample.core.database.AppDatabase;
import com.example.flowexample.core.di.modules.ActivityInjectorsModule_VeracityActivityInjector;
import com.example.flowexample.core.di.modules.AppModule;
import com.example.flowexample.core.di.modules.AppModule_ProvideApplicationContextFactory;
import com.example.flowexample.core.di.modules.DatabaseModule;
import com.example.flowexample.core.di.modules.DatabaseModule_ProvideDatabaseFactory;
import com.example.flowexample.core.di.modules.FragmentInjectorsModule_BreedsListFragmentInjector;
import com.example.flowexample.core.di.modules.FragmentInjectorsModule_DogBreedFragmentInjector;
import com.example.flowexample.core.di.modules.FragmentInjectorsModule_FavoriteFragmentInjector;
import com.example.flowexample.core.di.modules.InjectionViewModelProvider;
import com.example.flowexample.core.di.modules.InjectionViewModelProvider_Factory;
import com.example.flowexample.core.di.modules.NetworkModule;
import com.example.flowexample.core.di.modules.NetworkModule_ProvideRestServiceFactory;
import com.example.flowexample.dogbreed.data.DogBreedsReporiotry;
import com.example.flowexample.dogbreed.di.DogBreedModule;
import com.example.flowexample.dogbreed.di.DogBreedModule_ProvideDogBreedViewModelFactory;
import com.example.flowexample.dogbreed.di.DogBreedModule_ProvidesCurrencyRepostioryFactory;
import com.example.flowexample.dogbreed.presentation.ui.fragments.DogBreedFragment;
import com.example.flowexample.dogbreed.presentation.ui.fragments.DogBreedFragment_MembersInjector;
import com.example.flowexample.dogbreed.viewmodels.DogBreedViewModel;
import com.example.flowexample.dogbreed.viewmodels.DogBreedViewModel_Factory;
import com.example.flowexample.favorite.data.FavRebository;
import com.example.flowexample.favorite.di.FavModule;
import com.example.flowexample.favorite.di.FavModule_ProvideFaviewModelFactory;
import com.example.flowexample.favorite.di.FavModule_ProvidesFavRebositoryFactory;
import com.example.flowexample.favorite.presentation.ui.fragments.FavoriteFragment;
import com.example.flowexample.favorite.presentation.ui.fragments.FavoriteFragment_MembersInjector;
import com.example.flowexample.favorite.viewmodels.FavViewModel;
import com.example.flowexample.favorite.viewmodels.FavViewModel_Factory;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private final DaggerAppComponent appComponent = this;

  private Provider<ActivityInjectorsModule_VeracityActivityInjector.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

  private Provider<FragmentInjectorsModule_BreedsListFragmentInjector.BreedsFragmentSubcomponent.Factory> breedsFragmentSubcomponentFactoryProvider;

  private Provider<FragmentInjectorsModule_DogBreedFragmentInjector.DogBreedFragmentSubcomponent.Factory> dogBreedFragmentSubcomponentFactoryProvider;

  private Provider<FragmentInjectorsModule_FavoriteFragmentInjector.FavoriteFragmentSubcomponent.Factory> favoriteFragmentSubcomponentFactoryProvider;

  private Provider<App> applicationProvider;

  private Provider<Context> provideApplicationContextProvider;

  private Provider<RestWebService> provideRestServiceProvider;

  private Provider<AppDatabase> provideDatabaseProvider;

  private DaggerAppComponent(NetworkModule networkModuleParam, DatabaseModule databaseModuleParam,
      AppModule appModuleParam, App applicationParam) {

    initialize(networkModuleParam, databaseModuleParam, appModuleParam, applicationParam);

  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(4).put(MainActivity.class, ((Provider) mainActivitySubcomponentFactoryProvider)).put(BreedsFragment.class, ((Provider) breedsFragmentSubcomponentFactoryProvider)).put(DogBreedFragment.class, ((Provider) dogBreedFragmentSubcomponentFactoryProvider)).put(FavoriteFragment.class, ((Provider) favoriteFragmentSubcomponentFactoryProvider)).build();
  }

  private DispatchingAndroidInjector<Object> dispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final NetworkModule networkModuleParam,
      final DatabaseModule databaseModuleParam, final AppModule appModuleParam,
      final App applicationParam) {
    this.mainActivitySubcomponentFactoryProvider = new Provider<ActivityInjectorsModule_VeracityActivityInjector.MainActivitySubcomponent.Factory>() {
      @Override
      public ActivityInjectorsModule_VeracityActivityInjector.MainActivitySubcomponent.Factory get(
          ) {
        return new MainActivitySubcomponentFactory(appComponent);
      }
    };
    this.breedsFragmentSubcomponentFactoryProvider = new Provider<FragmentInjectorsModule_BreedsListFragmentInjector.BreedsFragmentSubcomponent.Factory>() {
      @Override
      public FragmentInjectorsModule_BreedsListFragmentInjector.BreedsFragmentSubcomponent.Factory get(
          ) {
        return new BreedsFragmentSubcomponentFactory(appComponent);
      }
    };
    this.dogBreedFragmentSubcomponentFactoryProvider = new Provider<FragmentInjectorsModule_DogBreedFragmentInjector.DogBreedFragmentSubcomponent.Factory>() {
      @Override
      public FragmentInjectorsModule_DogBreedFragmentInjector.DogBreedFragmentSubcomponent.Factory get(
          ) {
        return new DogBreedFragmentSubcomponentFactory(appComponent);
      }
    };
    this.favoriteFragmentSubcomponentFactoryProvider = new Provider<FragmentInjectorsModule_FavoriteFragmentInjector.FavoriteFragmentSubcomponent.Factory>() {
      @Override
      public FragmentInjectorsModule_FavoriteFragmentInjector.FavoriteFragmentSubcomponent.Factory get(
          ) {
        return new FavoriteFragmentSubcomponentFactory(appComponent);
      }
    };
    this.applicationProvider = InstanceFactory.create(applicationParam);
    this.provideApplicationContextProvider = DoubleCheck.provider(AppModule_ProvideApplicationContextFactory.create(appModuleParam, applicationProvider));
    this.provideRestServiceProvider = NetworkModule_ProvideRestServiceFactory.create(networkModuleParam, provideApplicationContextProvider, applicationProvider);
    this.provideDatabaseProvider = DatabaseModule_ProvideDatabaseFactory.create(databaseModuleParam, provideApplicationContextProvider);
  }

  @Override
  public void inject(App app) {
    injectApp(app);
  }

  private App injectApp(App instance) {
    App_MembersInjector.injectAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private App application;

    @Override
    public Builder application(App application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, App.class);
      return new DaggerAppComponent(new NetworkModule(), new DatabaseModule(), new AppModule(), application);
    }
  }

  private static final class MainActivitySubcomponentFactory implements ActivityInjectorsModule_VeracityActivityInjector.MainActivitySubcomponent.Factory {
    private final DaggerAppComponent appComponent;

    private MainActivitySubcomponentFactory(DaggerAppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public ActivityInjectorsModule_VeracityActivityInjector.MainActivitySubcomponent create(
        MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(appComponent, arg0);
    }
  }

  private static final class BreedsFragmentSubcomponentFactory implements FragmentInjectorsModule_BreedsListFragmentInjector.BreedsFragmentSubcomponent.Factory {
    private final DaggerAppComponent appComponent;

    private BreedsFragmentSubcomponentFactory(DaggerAppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public FragmentInjectorsModule_BreedsListFragmentInjector.BreedsFragmentSubcomponent create(
        BreedsFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new BreedsFragmentSubcomponentImpl(appComponent, new BreedListModule(), arg0);
    }
  }

  private static final class DogBreedFragmentSubcomponentFactory implements FragmentInjectorsModule_DogBreedFragmentInjector.DogBreedFragmentSubcomponent.Factory {
    private final DaggerAppComponent appComponent;

    private DogBreedFragmentSubcomponentFactory(DaggerAppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public FragmentInjectorsModule_DogBreedFragmentInjector.DogBreedFragmentSubcomponent create(
        DogBreedFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new DogBreedFragmentSubcomponentImpl(appComponent, new DogBreedModule(), arg0);
    }
  }

  private static final class FavoriteFragmentSubcomponentFactory implements FragmentInjectorsModule_FavoriteFragmentInjector.FavoriteFragmentSubcomponent.Factory {
    private final DaggerAppComponent appComponent;

    private FavoriteFragmentSubcomponentFactory(DaggerAppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public FragmentInjectorsModule_FavoriteFragmentInjector.FavoriteFragmentSubcomponent create(
        FavoriteFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new FavoriteFragmentSubcomponentImpl(appComponent, new FavModule(), arg0);
    }
  }

  private static final class MainActivitySubcomponentImpl implements ActivityInjectorsModule_VeracityActivityInjector.MainActivitySubcomponent {
    private final DaggerAppComponent appComponent;

    private final MainActivitySubcomponentImpl mainActivitySubcomponentImpl = this;

    private MainActivitySubcomponentImpl(DaggerAppComponent appComponent, MainActivity arg0Param) {
      this.appComponent = appComponent;


    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, appComponent.dispatchingAndroidInjectorOfObject());
      return instance;
    }
  }

  private static final class BreedsFragmentSubcomponentImpl implements FragmentInjectorsModule_BreedsListFragmentInjector.BreedsFragmentSubcomponent {
    private final DaggerAppComponent appComponent;

    private final BreedsFragmentSubcomponentImpl breedsFragmentSubcomponentImpl = this;

    private Provider<BreedsFragment> arg0Provider;

    private Provider<BreedsRepository> providesCurrencyRepostioryProvider;

    private Provider<BreedsVidewModel> breedsVidewModelProvider;

    private Provider<InjectionViewModelProvider<BreedsVidewModel>> injectionViewModelProvider;

    private Provider<BreedsVidewModel> provideVeracityiewModelProvider;

    private BreedsFragmentSubcomponentImpl(DaggerAppComponent appComponent,
        BreedListModule breedListModuleParam, BreedsFragment arg0Param) {
      this.appComponent = appComponent;

      initialize(breedListModuleParam, arg0Param);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final BreedListModule breedListModuleParam,
        final BreedsFragment arg0Param) {
      this.arg0Provider = InstanceFactory.create(arg0Param);
      this.providesCurrencyRepostioryProvider = BreedListModule_ProvidesCurrencyRepostioryFactory.create(breedListModuleParam, appComponent.provideRestServiceProvider);
      this.breedsVidewModelProvider = BreedsVidewModel_Factory.create(providesCurrencyRepostioryProvider);
      this.injectionViewModelProvider = InjectionViewModelProvider_Factory.create(breedsVidewModelProvider);
      this.provideVeracityiewModelProvider = BreedListModule_ProvideVeracityiewModelFactory.create(breedListModuleParam, arg0Provider, injectionViewModelProvider);
    }

    @Override
    public void inject(BreedsFragment arg0) {
      injectBreedsFragment(arg0);
    }

    private BreedsFragment injectBreedsFragment(BreedsFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, appComponent.dispatchingAndroidInjectorOfObject());
      BreedsFragment_MembersInjector.injectViewModel(instance, DoubleCheck.lazy(provideVeracityiewModelProvider));
      return instance;
    }
  }

  private static final class DogBreedFragmentSubcomponentImpl implements FragmentInjectorsModule_DogBreedFragmentInjector.DogBreedFragmentSubcomponent {
    private final DaggerAppComponent appComponent;

    private final DogBreedFragmentSubcomponentImpl dogBreedFragmentSubcomponentImpl = this;

    private Provider<DogBreedFragment> arg0Provider;

    private Provider<DogBreedsReporiotry> providesCurrencyRepostioryProvider;

    private Provider<DogBreedViewModel> dogBreedViewModelProvider;

    private Provider<InjectionViewModelProvider<DogBreedViewModel>> injectionViewModelProvider;

    private Provider<DogBreedViewModel> provideDogBreedViewModelProvider;

    private DogBreedFragmentSubcomponentImpl(DaggerAppComponent appComponent,
        DogBreedModule dogBreedModuleParam, DogBreedFragment arg0Param) {
      this.appComponent = appComponent;

      initialize(dogBreedModuleParam, arg0Param);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final DogBreedModule dogBreedModuleParam,
        final DogBreedFragment arg0Param) {
      this.arg0Provider = InstanceFactory.create(arg0Param);
      this.providesCurrencyRepostioryProvider = DogBreedModule_ProvidesCurrencyRepostioryFactory.create(dogBreedModuleParam, appComponent.provideRestServiceProvider, appComponent.provideDatabaseProvider);
      this.dogBreedViewModelProvider = DogBreedViewModel_Factory.create(providesCurrencyRepostioryProvider);
      this.injectionViewModelProvider = InjectionViewModelProvider_Factory.create(dogBreedViewModelProvider);
      this.provideDogBreedViewModelProvider = DogBreedModule_ProvideDogBreedViewModelFactory.create(dogBreedModuleParam, arg0Provider, injectionViewModelProvider);
    }

    @Override
    public void inject(DogBreedFragment arg0) {
      injectDogBreedFragment(arg0);
    }

    private DogBreedFragment injectDogBreedFragment(DogBreedFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, appComponent.dispatchingAndroidInjectorOfObject());
      DogBreedFragment_MembersInjector.injectViewModel(instance, DoubleCheck.lazy(provideDogBreedViewModelProvider));
      return instance;
    }
  }

  private static final class FavoriteFragmentSubcomponentImpl implements FragmentInjectorsModule_FavoriteFragmentInjector.FavoriteFragmentSubcomponent {
    private final DaggerAppComponent appComponent;

    private final FavoriteFragmentSubcomponentImpl favoriteFragmentSubcomponentImpl = this;

    private Provider<FavoriteFragment> arg0Provider;

    private Provider<FavRebository> providesFavRebositoryProvider;

    private Provider<FavViewModel> favViewModelProvider;

    private Provider<InjectionViewModelProvider<FavViewModel>> injectionViewModelProvider;

    private Provider<FavViewModel> provideFaviewModelProvider;

    private FavoriteFragmentSubcomponentImpl(DaggerAppComponent appComponent,
        FavModule favModuleParam, FavoriteFragment arg0Param) {
      this.appComponent = appComponent;

      initialize(favModuleParam, arg0Param);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final FavModule favModuleParam, final FavoriteFragment arg0Param) {
      this.arg0Provider = InstanceFactory.create(arg0Param);
      this.providesFavRebositoryProvider = FavModule_ProvidesFavRebositoryFactory.create(favModuleParam, appComponent.provideRestServiceProvider, appComponent.provideDatabaseProvider);
      this.favViewModelProvider = FavViewModel_Factory.create(providesFavRebositoryProvider);
      this.injectionViewModelProvider = InjectionViewModelProvider_Factory.create(favViewModelProvider);
      this.provideFaviewModelProvider = FavModule_ProvideFaviewModelFactory.create(favModuleParam, arg0Provider, injectionViewModelProvider);
    }

    @Override
    public void inject(FavoriteFragment arg0) {
      injectFavoriteFragment(arg0);
    }

    private FavoriteFragment injectFavoriteFragment(FavoriteFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, appComponent.dispatchingAndroidInjectorOfObject());
      FavoriteFragment_MembersInjector.injectViewModel(instance, DoubleCheck.lazy(provideFaviewModelProvider));
      return instance;
    }
  }
}
