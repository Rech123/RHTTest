// Generated by Dagger (https://dagger.dev).
package com.example.flowexample.veracity.di;

import com.example.flowexample.core.di.modules.InjectionViewModelProvider;
import com.example.flowexample.veracity.presentation.ui.fragments.VeracityFragment;
import com.example.flowexample.veracity.presentation.viewmodels.VeracityViewModel;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class VeracityModule_ProvideVeracityiewModelFactory implements Factory<VeracityViewModel> {
  private final VeracityModule module;

  private final Provider<VeracityFragment> fragmentProvider;

  private final Provider<InjectionViewModelProvider<VeracityViewModel>> viewModelProvider;

  public VeracityModule_ProvideVeracityiewModelFactory(VeracityModule module,
      Provider<VeracityFragment> fragmentProvider,
      Provider<InjectionViewModelProvider<VeracityViewModel>> viewModelProvider) {
    this.module = module;
    this.fragmentProvider = fragmentProvider;
    this.viewModelProvider = viewModelProvider;
  }

  @Override
  public VeracityViewModel get() {
    return provideVeracityiewModel(module, fragmentProvider.get(), viewModelProvider.get());
  }

  public static VeracityModule_ProvideVeracityiewModelFactory create(VeracityModule module,
      Provider<VeracityFragment> fragmentProvider,
      Provider<InjectionViewModelProvider<VeracityViewModel>> viewModelProvider) {
    return new VeracityModule_ProvideVeracityiewModelFactory(module, fragmentProvider, viewModelProvider);
  }

  public static VeracityViewModel provideVeracityiewModel(VeracityModule instance,
      VeracityFragment fragment, InjectionViewModelProvider<VeracityViewModel> viewModelProvider) {
    return Preconditions.checkNotNullFromProvides(instance.provideVeracityiewModel(fragment, viewModelProvider));
  }
}
